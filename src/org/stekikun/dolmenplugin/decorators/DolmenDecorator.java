package org.stekikun.dolmenplugin.decorators;

import java.io.File;

import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.viewers.BaseLabelProvider;
import org.eclipse.jface.viewers.IDecoration;
import org.eclipse.jface.viewers.ILightweightLabelDecorator;
import org.stekikun.dolmenplugin.Activator;
import org.stekikun.dolmenplugin.base.Images;
import org.stekikun.dolmenplugin.base.Utils;

/**
 * Implements a lightweight decorator which adds suffixes in
 * the explorers to mark Java files generated by Dolmen.<p>
 * It also uses an overlay to visually mark them as generated.
 * 
 * @author St√©phane Lescuyer
 */
public class DolmenDecorator extends BaseLabelProvider 
	implements ILightweightLabelDecorator {

	@Override
	public void decorate(Object element, IDecoration decoration) {
		if (!(element instanceof IResource))
			return;
		IResource res = (IResource) element;
		if (res.isDerived()) {
			String prop;
			try {
				prop = res.getPersistentProperty(Utils.GENERATED_PROPERTY);
			} catch (CoreException e) {
				return;
			}
			if (prop != null) {
				decoration.addSuffix(getSuffixFrom(prop));
				decoration.addOverlay(generatedDescriptor, IDecoration.TOP_LEFT);
			}
		}
	}
	
	/**
	 * The generated property strings have the form:
	 * <pre>
	 * 	Generated from ...filename... (...date..)
	 * </pre>
	 * 
	 * @param property
	 * @return the original Dolmen file name from the value of the
	 * 	{@link Utils#GENERATED_PROPERTY} string
	 */
	private static String getSuffixFrom(String property) {
		String fullname = 
			property.substring("Generated from ".length(), property.lastIndexOf('('));
		String name = fullname.substring(fullname.lastIndexOf(File.separatorChar) + 1);
		return "<from " + name + ">";
	}
	
	private ImageDescriptor generatedDescriptor =
		Activator.getImageDescriptor(Images.GENERATED);
}