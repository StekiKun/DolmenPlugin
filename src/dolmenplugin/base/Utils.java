package dolmenplugin.base;

import java.util.Arrays;
import java.util.List;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.QualifiedName;
import org.stekikun.dolmen.common.Hierarchy;

/**
 * Convenient utility functions
 * 
 * @author Stéphane Lescuyer
 */
public abstract class Utils {

	public Utils() {
		// Static utility only
	}

	/**
	 * Dynamic dispatcher for {@link IResource} instances
	 * 
	 * @author Stéphane Lescuyer
	 */
	public static enum IResourceKind {
		ROOT(IWorkspaceRoot.class),
		PROJECT(IProject.class),
		FOLDER(IFolder.class),
		FILE(IFile.class);
		
		@SuppressWarnings("unused")
		private final Class<? extends IResource> klass;
		
		IResourceKind(Class<? extends IResource> klass) {
			this.klass = klass;
		}
		
		@Hierarchy("")
		public static IResourceKind of(IResource res) {
			switch (res.getType()) {
			case IResource.ROOT: return ROOT;
			case IResource.PROJECT: return PROJECT;
			case IResource.FOLDER: return FOLDER;
			case IResource.FILE: return FILE;
			default:
				throw new IllegalArgumentException("Unknown resource kind value: " + res.getType());
			}
		}
	}
	
	/**
	 * Dolmen file extensions
	 */
	public static List<String> DOLMEN_EXTENSIONS =
		Arrays.asList("jl", "jg");
	
	/**
	 * @param file
	 * @return {@code true} if the given file resource
	 * 	has a Dolmen extension
	 */
	public static boolean isDolmenResource(IFile file) {
		return DOLMEN_EXTENSIONS.contains(file.getFileExtension());
	}
	
	/**
	 * The key for the property which is defined on resources
	 * generated by Dolmen
	 */
	public static final QualifiedName GENERATED_PROPERTY =
		new QualifiedName("dolmenplugin.base", "GENERATED");
	
	/**
	 * @param file
	 * @return {@code true} if the given file resource
	 * 	has been generated by Dolmen
	 */
	public static boolean isDolmenGenerated(IFile file) {
		if (!file.isDerived())
			return false;
		try {
			if (file.getPersistentProperty(GENERATED_PROPERTY) == null)
				return false;
		} catch (CoreException e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	/**
	 * @param ch
	 * @return {@code true} if and only if {@code ch} is 
	 * 	a valid character inside Dolmen's identifiers
	 */
	public static boolean isDolmenWordPart(char ch) {
		if (ch == '_') return true;
		if (ch >= 'a' && ch <= 'z') return true;
		if (ch >= 'A' && ch <= 'Z') return true;
		if (ch >= '0' && ch <= '9') return true;
		return false;
	}

	/**
	 * @param ch
	 * @return {@code true} if and only if {@code ch} is 
	 * 	a valid character starting a Dolmen identifier
	 */
	public static boolean isDolmenWordStart(char ch) {
		if (ch == '_') return true;
		if (ch >= 'a' && ch <= 'z') return true;
		if (ch >= 'A' && ch <= 'Z') return true;
		return false;
	}
}
